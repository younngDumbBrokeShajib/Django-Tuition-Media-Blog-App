uploading an image through model:
add media_root and media_url inside settings.py
in the base urls.py add static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT) with + of the urls
import static and settings in the urls.py to use media_root

saving the values from the front-end to model:
work in views.py  after creating the necessary fields in model.py
use if method==POST
get the values of the html field by name=request.POST[html field name]
after all the fetching all the values in the variables create an object of the model and then save inside of the views
exp: obj=Contact(model_class_varr=views_class_varr_for_html_field)
obj.save()
-----Saving from model form to database------
use the earlier created model class => Posts
create a postform class inside forms.py
use class Meta to get the model fields and use exclude for which of the model class field we dont need
for many2many relation use widgets for which class will be used for many2many relation with post model class ->
widgets={
            'subject':forms.CheckboxSelectMultiple(attrs={
                'multiple':True,
            }),
Then work on views.py for saving the values:
check if method==POST then create an object named "form" of type Postfrom(request.POST,request.FILES) request.FILES is needed for file type of input
check if form is valid-> form.is_valid()
then create another object of form(commit==false) and then save use this to save the values in database from form html field
then return-> render with context and




---------------------------------------------------------------------------------
----------------------One to Many relation----------------------
a user will have many posts.
use foreign key.(inside of the parameter we use the model we want to set 12many relation with here its user model related to post model)
so that user=models.ForeignKey(User) here User model will be linked to many different posts.
so user variable for the posts is used here

since we have already added few posts so use null=True and blank=True
on_delete=models.CASCADE-> will delete the post if the user is deleted
here in the project the views def is used as form class. and inside forms.py we have excluded the user field from the front end
but can be found from the super admin panel
-------------------------------Many 2 Many Relation--------------------------
for this project we use subjects and class_in model class for every posts
here many posts can have many subjects and class_in model realted to it
now to show the form to add posts we use forms.py
to show the m2m fields few things to add in forms.py->
1. add widgets a dict type widgets={ 'subject':forms.chekcboxselectmultiple( attrs={'multiple'=True})
} here inside the dict 'subject' is the post model's field name exact one.
2. Do this for every model related to m2m relation.


----------------# showing the post create form--------------------
create a view def and check is method==post
create an object of type form -> form=PostForm(request.POST,request.FILES)
check if the form is valid-> if form.is_valid():
now since we excluded the user field from the form so before saving use commit -> obj=form.save(commit=False)
then add the user field by the link user was request-> obj.user=request.user
now save the object obj.save()
now in the front-end we need to use cleaned_data['html-field_name'] and save it to the obj.model_fieldname using the for loop


------------------------------------------------------------------------


------------------showing posts with only 1 type of subject (uses of RELATED NAME)----------
a model class Subject has relation with Post class with related name='Subjects_set'
now in views:
create an object sub=Subject.objects.get(name='Maths') this will get the object of only type Maths
now we need sub varr with related name which is used with Post model.
so that we get all the Post object only having Subject Maths.
-----------------------

Pushing all the Objects saved in model into Front-end:
create a new def of views with parameter(request)
import the model in views
get all the objects of the model -> post=Post.objects.all()
pass the post varr as a dict with return render
just return the render(request,'template_name,{'post':post})
#now fetch the post varr passed in views use a for loop as {% for p in posts %} {{p.model_fields_name}} {%endfor%}

------------Inside Post Model-------------
Multiselectfield: install package django-multiselectfield
then add the package inside installed apps settings.py
before using it inside model class import that using import
first create the choices of type tuple-> see the actual code in class
then to use it for varr provide a default too.

---------------Ussage of Template View(Class Based)-------------
To use it create our homepage of our page
import templateview-> views.py inside MainProject folder. since its a homepage.
creat a class homeview(TemplateView) and add a class varr-> template_name="html file name"
inside main project urls.py. create a new url
import the template view created earlier
use viewClassName.as_view() or TemplateView.as_view(template_name="homepage.html")
to use TemplateView.as_view() need to import django.views.generic import TemplateView
#now we can send data from this class based view to the front end
to do so use context variable inside the class. And this context varr is tye of DICT and can add
valued to the keys using context['key_name']='value'.  but we return the context varr yet to access
the datas from context use the 'key_name'

-----------------Usage of Class based view--------------
We can use the same views class for different form and in different tmeplates.
Say a views class for contact us is created earlier. Now use this for different contact from
To use the same form views class create a new template html.
and a new url just like the previous one but  with parameter form_name=contactForm2,template_name='contactform2.html'
first create a another from in forms.py contactfrom2(forms.ModelForm)


----------------Template View Class Based-----------------------
this is django's generic view
used in main project folder for HomePage
import this in views.py django.views.generic import TemplateView
inside class the parameter-> (Templateview) Class Homepage(TemplateView)
inside the class add the template name and if needed use a getmethod.
to use the class views inside urls.py it should be used as  'classname.as_view(),name='homepage' '
to pass the few items using varr in the fron-end refer to the actual code

----------------------------CreateView Class Based--------------------
this is a generic class and has default classes and varr
first inside the class pass the model name, template name, and form_class
#If we need to have any custom behaviour then we use form_valid method.
since not all the fields are inputed by used such as id and user_id for that reason a function of the parent class needs to be
overridden to save the user related to the post
for this def form_valid(self,form): here form.instance.user=self.request.user gets the user and to save that
return super().form_valid(form). here we not calling the method inside itself rather the form_valid method of the parent class
is getting called. we do this when we are done with our custom logic and let the rest of the work done by itself. by default class based CreateView's (form_valid method) handles the form validation
and saves the inputed of the "POST" method by itself. So after adding our own logic we call the parent class form_valid method.
if we have nothing to do with our own logic then we dont even have to specify the form_valid method
just pass the required varr inside the class and boom dont even have to return or redirect like the function based views
#------- why we used get_success_url method--------
we need this method inside the createview class if we need to change the url after validation and saving the form
to use it dynamically we use this. we use this if we need to go to detailView of after saving the form of the newly created object
this will help us to send the post_id within the url and eveyrtime it changes when a new post is created



---------------------------ListView Class Bases-----------------
a class which send all the objects as a list in front-end
inside class specify the template name, model name and by default it sends all the model objects in a varr-> object_list
object_list can be use in for loop in html.
to change the name and to catch all the objects in the front-end using for-loop use varr-> context_object_name="a_name"
now to send data in the front-end use get_context_data() -> a built-in method which is used to send static data in front-
#dynamic filtering er jonno> get_query_set() method. it will change as the url changes
#just statically ekta filter chalanor jonno query_set varr is used
example :
def get_queryset(self):
        # Get the last 10 posts based on the ID (most recent)
        return Post.objects.all().order_by('-id')[:10]

if needed of more dynamic filtering example:
def get_queryset(self):
        # You can add dynamic filtering here if needed
        # Example: Filter posts by a specific category if 'category' is passed in the URL
        category = self.request.GET.get('category')
        if category:
            return Post.objects.filter(category=category).order_by('-id')[:10]
        return Post.objects.all().order_by('-id')[:10]

# multiple query_set canbe used by using ' | ' operator.
published_posts = Post.objects.filter(status='published').order_by('-id')[:10]
draft_posts = Post.objects.filter(status='draft').order_by('-id')[:10]
combined_queryset = published_posts | draft_posts
return combined_queryset

-------------------------------Post DetialView Class Based-----------------
a generic class
specify model name, template name, contect_object_name
create a url for this view such as '/detial/<int:pk>',name='detail',
here we tend to redirect to the detail page from ListView page.So in listview.html within ahref tag add
the detialView url name inside of the href tag and the primary key of the model.
<a href="/tuition/detail/{{i.id}}" here detail is the url name of the detailview and id is the primary key for the posts
#refer to the detial.html comments for more info.
# detail view has a method get_context_data(). Inside this method a boolean check is done if the user is the same
    as the author. and the result is saved in author varr.
# so whenever the url is hit the detail_view also runs and checks if the author varr is true or not using author varr
#then the user can click the edit and delete button. again if edit button is clicked then edit_views runs along with the url


-------------------------Post Update View Class Based-------------
a generic view so import the updateview
specify the model name, template and form_class this will be enough to create a update view. But to add extra features foloow the below
get_success_url()-> used to redirect to the page after updateview's work is done
get_context_data()-> used to work on data available in the model. Here data for single post is used like author. follow below
1. first get the exact object/post.
2. to do this use the get_context_data method. Inside method get the object by post=self.get_object().This is will give the exact object
3. then pass the id along with kwargs using reverse_lazy.('tuition:detial',kwargs={'pk':id}). this is done after the work for post update is done
4. here in kwargs pk is used in url inside urls.py. pk=primary_key
    inside the method get the post id by self.object,id
then pass the id as a dict varr named kwargs within return reverse_lazy as key='pk' and value=id
so now view is done add a url and add a button to edit the post through form
###### ERROR/Bug solving#############
in the detailview the authors passed as author(bool) varr from the edit view is not showing because
we need to return the context data having author varr from the detialview too. also with the eidtview
the author varr gives true if login_user==post_user


---------------------------Post Delete View----------------
import the generic djangoview inside views.py as DeleteView
create a class PostDeleteView(DeleteView)
pass the model name
template name and the success_url=reverse_lazy('url')
here while making the url pass the primary key just like eidtView.
add the url delete link in the details.html. then create a new delete template

----------------------------Form Design with indivdual fields without crispy forms--------------------

remove cirspy after pipe(|) symbol
usage of form's fields :
form.as_p=> shows the fields as paragraph
.as_table-> shows as tables
.as_ul-> unordered list with bullet points
## to use the individual fields with the label tag->
label->form.field_name.label_tag and that related input field form.input_field_name
then any field can be shows as crispy too-> use pipe(|) as_crispy_fields inside {{}}
if we use crispy fields then we don't need to add the form.field_name.label_tag

--------------Form design through MOdel Form class--------------------
use the widgets(dict) for adding class and few more attributes with the fields
use the labels(dict) for changing the label_tag of the model form.

-----------------Setting initials in the form--------------
to set initial from the views.py we use function based views
inside the def a dict named initials={'field_name':'initial content/input'}
pass this initials named dict as an argument while creating a obj inside def of that form class for both POST and GET method as
form=ContactForm(request.POST, initial=initials)

----------------Working of each/individual data of the FORM(Showing Error too)-------------------------
A DATA GETTING FROM THE FORM CAN BE USED IN VARIOUS OPERATION INSIDE THE FORM CLASS
NOT Inside the Meta class but inside the form class a method can be created.
the method name should follow contrains like :
############### def clean_mode_field_name(self): ################

inside the method use the self.cleaned_data.get('model_field_name'). then save it in a varr
then use the varr in varuious operation.
#####showing ERROR while handling data has been submitted.
use the saved value in a varr to split and call raise forms.ValidationError('Name cannot be more than 3 words')


---------------------Showing Message from View after submission-------------
used in contactForm2 class
first import the message lib
inside the class based view we want to show the message after the has passed the validation request.
so inside form.valid() condtion after saving the form we want to show the message
#### for class based view: messages.success(self.request,"Enter the message")
then return as HttpresponseRedirect(reverse_lazy('appname:url_name'))
##now to show the message inside fron-end: the context from views.py returns a object named messages. use it infor loop
we can use message.tags if its a success,error,debug,info. these can be used inside views too.
#### for function based views dont use self as argument for message.success('Pass just the messsage text')


-----------------Showing




------------------ Search Functionalities-----------------------
The serach function is handled by fucntion based view.
(create a form class where role='search' and add name="search" inside <input> html tag ) -> this is for basic.html
create a new def searchView(request) #request since it is a post method.
then get the values from serach box by query=request.POST.get('search','') -> here 'search' is the name field of html serach box
then ***import from django.db.models import Q.
then we check if there is any value inside query varr;
then usage of Q : query_set= (Q(title__icontains=query)) | (Q(details__icontains=query))
if there is any field of many2one or many2many relation then use (Q(Field__relatedModel__icontains=query))
then we want to show only the posts we get by search keyword, so need to filter the object
to do this result=Post.objects.filter(query_set)
then pass the result as a context dict.


-------------------------- Filter Functionalities----------------------------
We use the Q lib for this.
create a dropdown class in front-end and add a submit button at last inside of the dropdown class <div>
For each field add name='html field name'
now inside views.py get the inputed values
For filter at first pass all the subjects and classes through listView() using context['subjects'] and ['class_in'] this is done in ListView method()
then in the postlist.html using the contxt varr create a dropdown also add name for each html field.
then add a submit button. Then create another view for filter.
Using the post method USE (Q) queryset and then filter with post.objects.filter(queryset).distinct()
same goes for salary and avilability. ##### Do check how to filter salary range.


-------------------------Django Authentication-------------

-----------------LogIn()---------------
Authentication will be handled by creaing a new app named session
include the urls of this session app in the base app
create new ulrs.py file for session app
now first create a new view. Here import AuthenticationForm
import login,logout,authenticate and django.contrib messages to show the error and success messages
Here django provides dafault authentication form and function.Thats why it has been imported
    1.Now like the import post and get methods check if thats Post method.
    2.Then create an object of AuthenticationForm(request,data=request.POST)
    3. check if the form is valid. get the username and password saved in a variable using cleaned_data.get('username') and password
    4.now use those varrs to authenticate. Use authenticate function(username,password)->importe earlier saved in another varr
    5.check the is user(varr) is not None: use the login method-> imported earlier. and redirect to the homepage
    6.if user not valid present in else block show error message. use the message package imported earlier
    7.now in another else block for Get method create the form object of AuthenticationForm class
    8. return render(request,templatename,{'form':form})
#Note : Here in the session template folder a login template is created and crispy_form_tags are used.
by default django provied these authenticate forms. Here we have sent the form as a context data from the views.
the context data form object is created of AuthenticationForm class.
to edit the forms style in the template see the earlier template on how to edit the forms styling.

-------------------LogOut()---------------------------------------
use the logout method imported earlier with (request) parameter
then show the success message and then redirect or render
#To show only logout button signIn use if user.is_authenticated in a if block.

------------------ChangePassword(not forgotten)----------------------
create a new template like the logInUser
create a new url. and use the url in the nav-link dropdown.
Views: 1. import ChangePasswordForm from "django.contrib.auth.forms"
    2. Import update_session_auth_hash from django.contrib.auth
    3. check if method=="POST"
    4. create an object(form) of class ChangePasswordForm(data=request.POST,user=request.user)
        here data and user need to be passed with request since its a post method.
        post method always require (request.) to pass anything as arguments to create any object of any class
        that is why after checking if thats a post method we pass the data and user with (request.)
    5.check if form is valid(). then use the default method update_session_auth_has(request,user=form.user)
        here for arguments use request, and since a form object is created so we use form.user not request.user
    6. show the success message()
    7. redirect()
    8. Now if method is not post-> create an object of class ChangePasswordForm(user=request.user)
        here first argument like the post method is not passed since its a get method no data will be passeed down
        and request.user as the server will pass the requested user in the
    9. call the update_session_auth_hash(request,user=request.user)
    10. return render(to the creaeted form)
Note: here the method update_auth_user_hash only prevents the system to getting loged Out after password is changed
after ChangePasswordForm(data=request.POST,user=request.user) we need to save the form form.save()
then it will save the new password in the user database.

------------------------ User Profile Creation------------------

1. A User Model is created
2.Need to add a User that is created or Registered to the UserModel. For this use OneToOneField(User,on_delete=Models.Cascade)
3.since we are using the Model Form. So inside forms user selection is excluded will be added through views.
4. # adding User to the UserModel-> here first create an object of the Form Class but user field has not been assigned
    So after creating the object assing the user as object.user= request.user. and then save the form with the values
5. Get to know more about instance and how to add them
6. In the userProfileForm(forms.ModelForm) to change the input type and the label do this before Class Meta:
class UserProfile(forms.ModelForm):
    bdate=forms.DateField(
    label='Birth Date',
    widget=forms.TextInput(
        attrs={'type':'date'}
    )) here "bdate" is the model field name. use widget and attrs

_----------------------------Custom Model Methods-----------------
These are the methods to perform actions or operations in Model Fields.
It is done in models.py through method
Usage: we can call the methods instead of using for loop over the objects that are passed from views.py through context varr
exp: we can show all the subjects in front-end without using For loop by calling the methods instead as -> object
    problem 1: in the detail view while showing the selected Subjects there is a space after coma and an extra coma after the
        the subject. to remove this we can use the custom model method.
        thats a easy code look at the Post Model. and in front end call the function
    problem 2:Making first letter of each work in titile captal. For this get the title of each post first
            then use the python method title() to make it done. have done it for both list and detail page
            there are many other functions in python like upper(), lower().
    problem 3: showing only first 5 words in post list view. get the details data then use split(this gives as list) and check if that greater than 5
            then create a new string having the first 5 words of the list. and return the newly created string.



--------------------FOR Interview---------------------------

#Using Filter-----
to find customer who has ever ordered anything-> I can user filter and annotate all-togather
first annotate then filter
customers=Customer.objects.annotate(order_count=Count('order')).filter(order_count__gt=0)
another way
If you want to filter customers who have ever placed an order:
customers_with_orders = Customer.objects.filter(order__isnull=False).distinct()

-------Bulk Update using filter and Update()
from orders.models import Order  # Assuming your model is named 'Order' and is inside the 'orders' app

# Update all orders with status 'pending' to 'shipped'
Order.objects.filter(status='pending').update(status='shipped')

#Update an field for an specific order id:
create an url with <int:order_id>/
then in function based view with parameter(request,order_id): check if request-> post, get object-> order=get_object_or_404(order=order_id)
order.status='pending'
order.save() and then Return JsonResponse()



1. ----------------Handling invalid input using post method and Forms and class/function based views
define the form in forms.py and the model. Then in views.py creat an object of FormClass(request.POST)
then if form.is_valid(): form.save() return JsonResponse({'message':"success message"},status=200)
else JsonResponse({'error':form.errors},status=400)
for class based view:
class ProductCreateView(View):
    def post(self, request, *args, **kwargs):
        form = ProductForm(request.POST)  # Validate form data

        if form.is_valid():
            form.save()  # Save to database
            return JsonResponse({'message': 'Product created successfully'}, status=200)
        else:
            return JsonResponse({'error': form.errors}, status=400)


2.---------- Usage of When and Case along with Annotate-----------

first find the sum of orders then use the Case and inside with use When , if the condition is true
use then(Concat('field',Value(" VIP")) and save it in a varriable, also add default, and output_field=CharField()
customers=Customer.objects.annotate(order_count=Count('order'),
display_name=Case(
when(order_count__gt=5, then(Concat('name',Value('VIP'))),
default='name', #it is a model_field -> name
output_field=CharField()
)
---------How to use When and Case like or and And operationn with Q() and except Q()
add multiple When one after another to work as OR function
add both conditions inside one single When(gt,exact) to work as And Operation

customers = Customer.objects.annotate(
    order_count=Count('order'),
    display_name=Case(
        When(Q(order_count__gt=5) | Q(name__startswith="J"), then=Value('VIP Customer')),
        When(order_count__lt=3, then=Value('New Customer')),
        default=Value('Regular Customer'),
        output_field=CharField()
    )
)

-----using AND OR operation using filter()--------
Post.objects.filter(salary__lte=2000).filter(salary__gte=800) here by using (.) between and Operation is performed



3------------ methods to use with annotate()------
Aggregations	Count(), Sum(), Avg(), Max(), Min()
Math & Arithmetic	F(), ExpressionWrapper()
String Functions	Length(), Lower(), Upper(), Trim(), Concat()
Date & Time	ExtractYear(), ExtractMonth(), ExtractDay(), TruncMonth()
JSON (PostgreSQL)	KeyTextTransform()

Operator	Usage in When()	Meaning
__gt	order_count__gt=5	Greater than 5
__gte	order_count__gte=5	Greater than or equal to 5
__lt	order_count__lt=5	Less than 5
__lte	order_count__lte=5	Less than or equal to 5
__exact	order_count__exact=5	Exactly 5
__iexact	name__iexact='john'	Case-insensitive exact match (John == john)
__contains	name__contains='VIP'	Field contains a substring (case-sensitive)
__icontains	name__icontains='vip'	Field contains a substring (case-insensitive)
__in	order_count__in=[3, 5, 7]	Matches values in a list
__isnull	order_count__isnull=True	Checks if the field is NULL
__startswith	name__startswith='J'	Starts with 'J' (case-sensitive)
__istartswith	name__istartswith='j'	Starts with 'j' (case-insensitive)
__endswith	name__endswith='VIP'	Ends with 'VIP' (case-sensitive)
__iendswith	name__iendswith='vip'	Ends with 'VIP' (case-insensitive)
__exclude post.objects.exclude(name__exact='string-any')

these can be used with filter method also. then after filtering to count all the objects use .count()


4------------- Usage

